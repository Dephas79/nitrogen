#!/usr/bin/env escript
%% -*- erlang -*-
%% vim: ts=4 sw=4 et ft=erlang
%%
%% Coyright 2021 - Jesse Gumm
%% MIT License
%%
%%
%% Usage: ./add_relx_to_rebar3.escript [rebar.config]
%%
%% Takes the target rebar.config, analyzes the deps, and adds a relx item to it

main([]) ->
    main(["rebar.config"]);
main([File]) ->
    Config = case file:consult(File) of
        {error, Reason} ->
            io:format("FAIL! Reason: ~p~n",[Reason]),
            halt(1);
        {ok, X} ->
            X
    end,
    Relx = proplists:get_value(relx, Config, undefined),
    case Relx of
        undefined -> ok;
        _ ->
            io:format("Target file already has relx rules. Aborting.~n"),
            halt(1)
    end,

    Deps = proplists:get_value(deps, Config, []),
    
    Apps = lists:map(fun
        (App) when is_atom(App) ->
            App;
        (App) when is_tuple(App) ->
            element(1, App)
    end, Deps),

    Applines = lists:map(fun(App) ->
        ["        {", atom_to_list(App), ", load},\n"]
    end, Apps),

    NewRelx = ["\n\n{relx, [{release, {nitrogen, \"0.0.1\"}, [
        sasl,\n",
        Applines,
"        nitrogen
    ]},
    {sys_config, \"etc/autogenerated.config.all\"},
    {vm_args, \"etc/vm.args\"},
    {dev_mode, true},
    {mode, dev},
    {include_erts, false},
    {extended_start_script, true},
    {overlay, [
        {copy, \"site\", \"site\"},
        {copy, \"priv\", \"priv\"}
    ]}
]}."],

    file:write_file(File, NewRelx, [append]),
    io:format("Relx rules added to ~p~n",[File]),
    ok.
        

            
            
